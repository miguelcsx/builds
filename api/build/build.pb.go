// proto/build/build.proto

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.3
// 	protoc        v3.21.12
// source: build/build.proto

package build

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RemarkType int32

const (
	RemarkType_TYPE_UNSPECIFIED RemarkType = 0
	RemarkType_OPTIMIZATION     RemarkType = 1
	RemarkType_KERNEL           RemarkType = 2
	RemarkType_ANALYSIS         RemarkType = 3
	RemarkType_METRIC           RemarkType = 4
	RemarkType_INFO             RemarkType = 5
)

// Enum value maps for RemarkType.
var (
	RemarkType_name = map[int32]string{
		0: "TYPE_UNSPECIFIED",
		1: "OPTIMIZATION",
		2: "KERNEL",
		3: "ANALYSIS",
		4: "METRIC",
		5: "INFO",
	}
	RemarkType_value = map[string]int32{
		"TYPE_UNSPECIFIED": 0,
		"OPTIMIZATION":     1,
		"KERNEL":           2,
		"ANALYSIS":         3,
		"METRIC":           4,
		"INFO":             5,
	}
)

func (x RemarkType) Enum() *RemarkType {
	p := new(RemarkType)
	*p = x
	return p
}

func (x RemarkType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RemarkType) Descriptor() protoreflect.EnumDescriptor {
	return file_build_build_proto_enumTypes[0].Descriptor()
}

func (RemarkType) Type() protoreflect.EnumType {
	return &file_build_build_proto_enumTypes[0]
}

func (x RemarkType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RemarkType.Descriptor instead.
func (RemarkType) EnumDescriptor() ([]byte, []int) {
	return file_build_build_proto_rawDescGZIP(), []int{0}
}

type RemarkPass int32

const (
	RemarkPass_PASS_UNSPECIFIED RemarkPass = 0
	RemarkPass_VECTORIZATION    RemarkPass = 1
	RemarkPass_INLINING         RemarkPass = 2
	RemarkPass_KERNEL_INFO      RemarkPass = 3
	RemarkPass_SIZE_INFO        RemarkPass = 4
	RemarkPass_PASS_ANALYSIS    RemarkPass = 5
)

// Enum value maps for RemarkPass.
var (
	RemarkPass_name = map[int32]string{
		0: "PASS_UNSPECIFIED",
		1: "VECTORIZATION",
		2: "INLINING",
		3: "KERNEL_INFO",
		4: "SIZE_INFO",
		5: "PASS_ANALYSIS",
	}
	RemarkPass_value = map[string]int32{
		"PASS_UNSPECIFIED": 0,
		"VECTORIZATION":    1,
		"INLINING":         2,
		"KERNEL_INFO":      3,
		"SIZE_INFO":        4,
		"PASS_ANALYSIS":    5,
	}
)

func (x RemarkPass) Enum() *RemarkPass {
	p := new(RemarkPass)
	*p = x
	return p
}

func (x RemarkPass) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RemarkPass) Descriptor() protoreflect.EnumDescriptor {
	return file_build_build_proto_enumTypes[1].Descriptor()
}

func (RemarkPass) Type() protoreflect.EnumType {
	return &file_build_build_proto_enumTypes[1]
}

func (x RemarkPass) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RemarkPass.Descriptor instead.
func (RemarkPass) EnumDescriptor() ([]byte, []int) {
	return file_build_build_proto_rawDescGZIP(), []int{1}
}

type RemarkStatus int32

const (
	RemarkStatus_STATUS_UNSPECIFIED RemarkStatus = 0
	RemarkStatus_PASSED             RemarkStatus = 1
	RemarkStatus_MISSED             RemarkStatus = 2
	RemarkStatus_STATUS_ANALYSIS    RemarkStatus = 3
)

// Enum value maps for RemarkStatus.
var (
	RemarkStatus_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "PASSED",
		2: "MISSED",
		3: "STATUS_ANALYSIS",
	}
	RemarkStatus_value = map[string]int32{
		"STATUS_UNSPECIFIED": 0,
		"PASSED":             1,
		"MISSED":             2,
		"STATUS_ANALYSIS":    3,
	}
)

func (x RemarkStatus) Enum() *RemarkStatus {
	p := new(RemarkStatus)
	*p = x
	return p
}

func (x RemarkStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RemarkStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_build_build_proto_enumTypes[2].Descriptor()
}

func (RemarkStatus) Type() protoreflect.EnumType {
	return &file_build_build_proto_enumTypes[2]
}

func (x RemarkStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RemarkStatus.Descriptor instead.
func (RemarkStatus) EnumDescriptor() ([]byte, []int) {
	return file_build_build_proto_rawDescGZIP(), []int{2}
}

type CompilerRemark_Type int32

const (
	CompilerRemark_TYPE_UNSPECIFIED CompilerRemark_Type = 0
	CompilerRemark_OPTIMIZATION     CompilerRemark_Type = 1
	CompilerRemark_KERNEL           CompilerRemark_Type = 2
	CompilerRemark_ANALYSIS         CompilerRemark_Type = 3
	CompilerRemark_METRIC           CompilerRemark_Type = 4
	CompilerRemark_INFO             CompilerRemark_Type = 5
)

// Enum value maps for CompilerRemark_Type.
var (
	CompilerRemark_Type_name = map[int32]string{
		0: "TYPE_UNSPECIFIED",
		1: "OPTIMIZATION",
		2: "KERNEL",
		3: "ANALYSIS",
		4: "METRIC",
		5: "INFO",
	}
	CompilerRemark_Type_value = map[string]int32{
		"TYPE_UNSPECIFIED": 0,
		"OPTIMIZATION":     1,
		"KERNEL":           2,
		"ANALYSIS":         3,
		"METRIC":           4,
		"INFO":             5,
	}
)

func (x CompilerRemark_Type) Enum() *CompilerRemark_Type {
	p := new(CompilerRemark_Type)
	*p = x
	return p
}

func (x CompilerRemark_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CompilerRemark_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_build_build_proto_enumTypes[3].Descriptor()
}

func (CompilerRemark_Type) Type() protoreflect.EnumType {
	return &file_build_build_proto_enumTypes[3]
}

func (x CompilerRemark_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CompilerRemark_Type.Descriptor instead.
func (CompilerRemark_Type) EnumDescriptor() ([]byte, []int) {
	return file_build_build_proto_rawDescGZIP(), []int{12, 0}
}

type CompilerRemark_Pass int32

const (
	CompilerRemark_PASS_UNSPECIFIED CompilerRemark_Pass = 0
	CompilerRemark_VECTORIZATION    CompilerRemark_Pass = 1
	CompilerRemark_INLINING         CompilerRemark_Pass = 2
	CompilerRemark_KERNEL_INFO      CompilerRemark_Pass = 3
	CompilerRemark_SIZE_INFO        CompilerRemark_Pass = 4
	CompilerRemark_PASS_ANALYSIS    CompilerRemark_Pass = 5
)

// Enum value maps for CompilerRemark_Pass.
var (
	CompilerRemark_Pass_name = map[int32]string{
		0: "PASS_UNSPECIFIED",
		1: "VECTORIZATION",
		2: "INLINING",
		3: "KERNEL_INFO",
		4: "SIZE_INFO",
		5: "PASS_ANALYSIS",
	}
	CompilerRemark_Pass_value = map[string]int32{
		"PASS_UNSPECIFIED": 0,
		"VECTORIZATION":    1,
		"INLINING":         2,
		"KERNEL_INFO":      3,
		"SIZE_INFO":        4,
		"PASS_ANALYSIS":    5,
	}
)

func (x CompilerRemark_Pass) Enum() *CompilerRemark_Pass {
	p := new(CompilerRemark_Pass)
	*p = x
	return p
}

func (x CompilerRemark_Pass) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CompilerRemark_Pass) Descriptor() protoreflect.EnumDescriptor {
	return file_build_build_proto_enumTypes[4].Descriptor()
}

func (CompilerRemark_Pass) Type() protoreflect.EnumType {
	return &file_build_build_proto_enumTypes[4]
}

func (x CompilerRemark_Pass) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CompilerRemark_Pass.Descriptor instead.
func (CompilerRemark_Pass) EnumDescriptor() ([]byte, []int) {
	return file_build_build_proto_rawDescGZIP(), []int{12, 1}
}

type CompilerRemark_Status int32

const (
	CompilerRemark_STATUS_UNSPECIFIED CompilerRemark_Status = 0
	CompilerRemark_PASSED             CompilerRemark_Status = 1
	CompilerRemark_MISSED             CompilerRemark_Status = 2
	CompilerRemark_STATUS_ANALYSIS    CompilerRemark_Status = 3
)

// Enum value maps for CompilerRemark_Status.
var (
	CompilerRemark_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "PASSED",
		2: "MISSED",
		3: "STATUS_ANALYSIS",
	}
	CompilerRemark_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED": 0,
		"PASSED":             1,
		"MISSED":             2,
		"STATUS_ANALYSIS":    3,
	}
)

func (x CompilerRemark_Status) Enum() *CompilerRemark_Status {
	p := new(CompilerRemark_Status)
	*p = x
	return p
}

func (x CompilerRemark_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CompilerRemark_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_build_build_proto_enumTypes[5].Descriptor()
}

func (CompilerRemark_Status) Type() protoreflect.EnumType {
	return &file_build_build_proto_enumTypes[5]
}

func (x CompilerRemark_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CompilerRemark_Status.Descriptor instead.
func (CompilerRemark_Status) EnumDescriptor() ([]byte, []int) {
	return file_build_build_proto_rawDescGZIP(), []int{12, 2}
}

type Build struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	StartTime     *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime       *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	Duration      float64                `protobuf:"fixed64,4,opt,name=duration,proto3" json:"duration,omitempty"`
	Success       bool                   `protobuf:"varint,5,opt,name=success,proto3" json:"success,omitempty"`
	Error         string                 `protobuf:"bytes,6,opt,name=error,proto3" json:"error,omitempty"`
	Environment   *Environment           `protobuf:"bytes,7,opt,name=environment,proto3" json:"environment,omitempty"`
	Hardware      *Hardware              `protobuf:"bytes,8,opt,name=hardware,proto3" json:"hardware,omitempty"`
	Compiler      *Compiler              `protobuf:"bytes,9,opt,name=compiler,proto3" json:"compiler,omitempty"`
	Command       *Command               `protobuf:"bytes,10,opt,name=command,proto3" json:"command,omitempty"`
	Output        *Output                `protobuf:"bytes,11,opt,name=output,proto3" json:"output,omitempty"`
	Metrics       *BuildMetrics          `protobuf:"bytes,12,opt,name=metrics,proto3" json:"metrics,omitempty"`
	Remarks       []*CompilerRemark      `protobuf:"bytes,13,rep,name=remarks,proto3" json:"remarks,omitempty"`
	ResourceUsage *ResourceUsage         `protobuf:"bytes,14,opt,name=resource_usage,json=resourceUsage,proto3" json:"resource_usage,omitempty"`
	Performance   *Performance           `protobuf:"bytes,15,opt,name=performance,proto3" json:"performance,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Build) Reset() {
	*x = Build{}
	mi := &file_build_build_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Build) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Build) ProtoMessage() {}

func (x *Build) ProtoReflect() protoreflect.Message {
	mi := &file_build_build_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Build.ProtoReflect.Descriptor instead.
func (*Build) Descriptor() ([]byte, []int) {
	return file_build_build_proto_rawDescGZIP(), []int{0}
}

func (x *Build) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Build) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *Build) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *Build) GetDuration() float64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *Build) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *Build) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *Build) GetEnvironment() *Environment {
	if x != nil {
		return x.Environment
	}
	return nil
}

func (x *Build) GetHardware() *Hardware {
	if x != nil {
		return x.Hardware
	}
	return nil
}

func (x *Build) GetCompiler() *Compiler {
	if x != nil {
		return x.Compiler
	}
	return nil
}

func (x *Build) GetCommand() *Command {
	if x != nil {
		return x.Command
	}
	return nil
}

func (x *Build) GetOutput() *Output {
	if x != nil {
		return x.Output
	}
	return nil
}

func (x *Build) GetMetrics() *BuildMetrics {
	if x != nil {
		return x.Metrics
	}
	return nil
}

func (x *Build) GetRemarks() []*CompilerRemark {
	if x != nil {
		return x.Remarks
	}
	return nil
}

func (x *Build) GetResourceUsage() *ResourceUsage {
	if x != nil {
		return x.ResourceUsage
	}
	return nil
}

func (x *Build) GetPerformance() *Performance {
	if x != nil {
		return x.Performance
	}
	return nil
}

type Environment struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Os            string                 `protobuf:"bytes,1,opt,name=os,proto3" json:"os,omitempty"`
	Arch          string                 `protobuf:"bytes,2,opt,name=arch,proto3" json:"arch,omitempty"`
	Variables     map[string]string      `protobuf:"bytes,3,rep,name=variables,proto3" json:"variables,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	WorkingDir    string                 `protobuf:"bytes,4,opt,name=working_dir,json=workingDir,proto3" json:"working_dir,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Environment) Reset() {
	*x = Environment{}
	mi := &file_build_build_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Environment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Environment) ProtoMessage() {}

func (x *Environment) ProtoReflect() protoreflect.Message {
	mi := &file_build_build_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Environment.ProtoReflect.Descriptor instead.
func (*Environment) Descriptor() ([]byte, []int) {
	return file_build_build_proto_rawDescGZIP(), []int{1}
}

func (x *Environment) GetOs() string {
	if x != nil {
		return x.Os
	}
	return ""
}

func (x *Environment) GetArch() string {
	if x != nil {
		return x.Arch
	}
	return ""
}

func (x *Environment) GetVariables() map[string]string {
	if x != nil {
		return x.Variables
	}
	return nil
}

func (x *Environment) GetWorkingDir() string {
	if x != nil {
		return x.WorkingDir
	}
	return ""
}

type Hardware struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Cpu           *CPU                   `protobuf:"bytes,1,opt,name=cpu,proto3" json:"cpu,omitempty"`
	Memory        *Memory                `protobuf:"bytes,2,opt,name=memory,proto3" json:"memory,omitempty"`
	Gpus          []*GPU                 `protobuf:"bytes,3,rep,name=gpus,proto3" json:"gpus,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Hardware) Reset() {
	*x = Hardware{}
	mi := &file_build_build_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Hardware) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Hardware) ProtoMessage() {}

func (x *Hardware) ProtoReflect() protoreflect.Message {
	mi := &file_build_build_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Hardware.ProtoReflect.Descriptor instead.
func (*Hardware) Descriptor() ([]byte, []int) {
	return file_build_build_proto_rawDescGZIP(), []int{2}
}

func (x *Hardware) GetCpu() *CPU {
	if x != nil {
		return x.Cpu
	}
	return nil
}

func (x *Hardware) GetMemory() *Memory {
	if x != nil {
		return x.Memory
	}
	return nil
}

func (x *Hardware) GetGpus() []*GPU {
	if x != nil {
		return x.Gpus
	}
	return nil
}

type CPU struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Model         string                 `protobuf:"bytes,1,opt,name=model,proto3" json:"model,omitempty"`
	Frequency     float64                `protobuf:"fixed64,2,opt,name=frequency,proto3" json:"frequency,omitempty"`
	Cores         int32                  `protobuf:"varint,3,opt,name=cores,proto3" json:"cores,omitempty"`
	Threads       int32                  `protobuf:"varint,4,opt,name=threads,proto3" json:"threads,omitempty"`
	Vendor        string                 `protobuf:"bytes,5,opt,name=vendor,proto3" json:"vendor,omitempty"`
	CacheSize     int64                  `protobuf:"varint,6,opt,name=cache_size,json=cacheSize,proto3" json:"cache_size,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CPU) Reset() {
	*x = CPU{}
	mi := &file_build_build_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPU) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPU) ProtoMessage() {}

func (x *CPU) ProtoReflect() protoreflect.Message {
	mi := &file_build_build_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPU.ProtoReflect.Descriptor instead.
func (*CPU) Descriptor() ([]byte, []int) {
	return file_build_build_proto_rawDescGZIP(), []int{3}
}

func (x *CPU) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *CPU) GetFrequency() float64 {
	if x != nil {
		return x.Frequency
	}
	return 0
}

func (x *CPU) GetCores() int32 {
	if x != nil {
		return x.Cores
	}
	return 0
}

func (x *CPU) GetThreads() int32 {
	if x != nil {
		return x.Threads
	}
	return 0
}

func (x *CPU) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *CPU) GetCacheSize() int64 {
	if x != nil {
		return x.CacheSize
	}
	return 0
}

type Memory struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Total         int64                  `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Available     int64                  `protobuf:"varint,2,opt,name=available,proto3" json:"available,omitempty"`
	SwapTotal     int64                  `protobuf:"varint,3,opt,name=swap_total,json=swapTotal,proto3" json:"swap_total,omitempty"`
	SwapFree      int64                  `protobuf:"varint,4,opt,name=swap_free,json=swapFree,proto3" json:"swap_free,omitempty"`
	Used          int64                  `protobuf:"varint,5,opt,name=used,proto3" json:"used,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Memory) Reset() {
	*x = Memory{}
	mi := &file_build_build_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Memory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Memory) ProtoMessage() {}

func (x *Memory) ProtoReflect() protoreflect.Message {
	mi := &file_build_build_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Memory.ProtoReflect.Descriptor instead.
func (*Memory) Descriptor() ([]byte, []int) {
	return file_build_build_proto_rawDescGZIP(), []int{4}
}

func (x *Memory) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *Memory) GetAvailable() int64 {
	if x != nil {
		return x.Available
	}
	return 0
}

func (x *Memory) GetSwapTotal() int64 {
	if x != nil {
		return x.SwapTotal
	}
	return 0
}

func (x *Memory) GetSwapFree() int64 {
	if x != nil {
		return x.SwapFree
	}
	return 0
}

func (x *Memory) GetUsed() int64 {
	if x != nil {
		return x.Used
	}
	return 0
}

type GPU struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Model         string                 `protobuf:"bytes,1,opt,name=model,proto3" json:"model,omitempty"`
	Memory        int64                  `protobuf:"varint,2,opt,name=memory,proto3" json:"memory,omitempty"`
	Driver        string                 `protobuf:"bytes,3,opt,name=driver,proto3" json:"driver,omitempty"`
	ComputeCaps   string                 `protobuf:"bytes,4,opt,name=compute_caps,json=computeCaps,proto3" json:"compute_caps,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GPU) Reset() {
	*x = GPU{}
	mi := &file_build_build_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GPU) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GPU) ProtoMessage() {}

func (x *GPU) ProtoReflect() protoreflect.Message {
	mi := &file_build_build_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GPU.ProtoReflect.Descriptor instead.
func (*GPU) Descriptor() ([]byte, []int) {
	return file_build_build_proto_rawDescGZIP(), []int{5}
}

func (x *GPU) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *GPU) GetMemory() int64 {
	if x != nil {
		return x.Memory
	}
	return 0
}

func (x *GPU) GetDriver() string {
	if x != nil {
		return x.Driver
	}
	return ""
}

func (x *GPU) GetComputeCaps() string {
	if x != nil {
		return x.ComputeCaps
	}
	return ""
}

type Compiler struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Version       string                 `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	Target        string                 `protobuf:"bytes,3,opt,name=target,proto3" json:"target,omitempty"`
	Options       []string               `protobuf:"bytes,4,rep,name=options,proto3" json:"options,omitempty"`
	Optimizations map[string]bool        `protobuf:"bytes,5,rep,name=optimizations,proto3" json:"optimizations,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	Flags         map[string]string      `protobuf:"bytes,6,rep,name=flags,proto3" json:"flags,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Language      *Language              `protobuf:"bytes,7,opt,name=language,proto3" json:"language,omitempty"`
	Features      *CompilerFeatures      `protobuf:"bytes,8,opt,name=features,proto3" json:"features,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Compiler) Reset() {
	*x = Compiler{}
	mi := &file_build_build_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Compiler) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Compiler) ProtoMessage() {}

func (x *Compiler) ProtoReflect() protoreflect.Message {
	mi := &file_build_build_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Compiler.ProtoReflect.Descriptor instead.
func (*Compiler) Descriptor() ([]byte, []int) {
	return file_build_build_proto_rawDescGZIP(), []int{6}
}

func (x *Compiler) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Compiler) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Compiler) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *Compiler) GetOptions() []string {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *Compiler) GetOptimizations() map[string]bool {
	if x != nil {
		return x.Optimizations
	}
	return nil
}

func (x *Compiler) GetFlags() map[string]string {
	if x != nil {
		return x.Flags
	}
	return nil
}

func (x *Compiler) GetLanguage() *Language {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *Compiler) GetFeatures() *CompilerFeatures {
	if x != nil {
		return x.Features
	}
	return nil
}

type Language struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Version       string                 `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	Specification string                 `protobuf:"bytes,3,opt,name=specification,proto3" json:"specification,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Language) Reset() {
	*x = Language{}
	mi := &file_build_build_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Language) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Language) ProtoMessage() {}

func (x *Language) ProtoReflect() protoreflect.Message {
	mi := &file_build_build_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Language.ProtoReflect.Descriptor instead.
func (*Language) Descriptor() ([]byte, []int) {
	return file_build_build_proto_rawDescGZIP(), []int{7}
}

func (x *Language) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Language) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Language) GetSpecification() string {
	if x != nil {
		return x.Specification
	}
	return ""
}

type CompilerFeatures struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	SupportsOpenmp bool                   `protobuf:"varint,1,opt,name=supports_openmp,json=supportsOpenmp,proto3" json:"supports_openmp,omitempty"`
	SupportsGpu    bool                   `protobuf:"varint,2,opt,name=supports_gpu,json=supportsGpu,proto3" json:"supports_gpu,omitempty"`
	SupportsLto    bool                   `protobuf:"varint,3,opt,name=supports_lto,json=supportsLto,proto3" json:"supports_lto,omitempty"`
	SupportsPgo    bool                   `protobuf:"varint,4,opt,name=supports_pgo,json=supportsPgo,proto3" json:"supports_pgo,omitempty"`
	Extensions     []string               `protobuf:"bytes,5,rep,name=extensions,proto3" json:"extensions,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CompilerFeatures) Reset() {
	*x = CompilerFeatures{}
	mi := &file_build_build_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CompilerFeatures) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompilerFeatures) ProtoMessage() {}

func (x *CompilerFeatures) ProtoReflect() protoreflect.Message {
	mi := &file_build_build_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompilerFeatures.ProtoReflect.Descriptor instead.
func (*CompilerFeatures) Descriptor() ([]byte, []int) {
	return file_build_build_proto_rawDescGZIP(), []int{8}
}

func (x *CompilerFeatures) GetSupportsOpenmp() bool {
	if x != nil {
		return x.SupportsOpenmp
	}
	return false
}

func (x *CompilerFeatures) GetSupportsGpu() bool {
	if x != nil {
		return x.SupportsGpu
	}
	return false
}

func (x *CompilerFeatures) GetSupportsLto() bool {
	if x != nil {
		return x.SupportsLto
	}
	return false
}

func (x *CompilerFeatures) GetSupportsPgo() bool {
	if x != nil {
		return x.SupportsPgo
	}
	return false
}

func (x *CompilerFeatures) GetExtensions() []string {
	if x != nil {
		return x.Extensions
	}
	return nil
}

type Command struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Executable    string                 `protobuf:"bytes,1,opt,name=executable,proto3" json:"executable,omitempty"`
	Arguments     []string               `protobuf:"bytes,2,rep,name=arguments,proto3" json:"arguments,omitempty"`
	WorkingDir    string                 `protobuf:"bytes,3,opt,name=working_dir,json=workingDir,proto3" json:"working_dir,omitempty"`
	Env           map[string]string      `protobuf:"bytes,4,rep,name=env,proto3" json:"env,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Command) Reset() {
	*x = Command{}
	mi := &file_build_build_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Command) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Command) ProtoMessage() {}

func (x *Command) ProtoReflect() protoreflect.Message {
	mi := &file_build_build_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Command.ProtoReflect.Descriptor instead.
func (*Command) Descriptor() ([]byte, []int) {
	return file_build_build_proto_rawDescGZIP(), []int{9}
}

func (x *Command) GetExecutable() string {
	if x != nil {
		return x.Executable
	}
	return ""
}

func (x *Command) GetArguments() []string {
	if x != nil {
		return x.Arguments
	}
	return nil
}

func (x *Command) GetWorkingDir() string {
	if x != nil {
		return x.WorkingDir
	}
	return ""
}

func (x *Command) GetEnv() map[string]string {
	if x != nil {
		return x.Env
	}
	return nil
}

type Output struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Stdout        string                 `protobuf:"bytes,1,opt,name=stdout,proto3" json:"stdout,omitempty"`
	Stderr        string                 `protobuf:"bytes,2,opt,name=stderr,proto3" json:"stderr,omitempty"`
	Artifacts     []*Artifact            `protobuf:"bytes,3,rep,name=artifacts,proto3" json:"artifacts,omitempty"`
	ExitCode      int32                  `protobuf:"varint,4,opt,name=exit_code,json=exitCode,proto3" json:"exit_code,omitempty"`
	Warnings      []string               `protobuf:"bytes,5,rep,name=warnings,proto3" json:"warnings,omitempty"`
	Errors        []string               `protobuf:"bytes,6,rep,name=errors,proto3" json:"errors,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Output) Reset() {
	*x = Output{}
	mi := &file_build_build_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Output) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Output) ProtoMessage() {}

func (x *Output) ProtoReflect() protoreflect.Message {
	mi := &file_build_build_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Output.ProtoReflect.Descriptor instead.
func (*Output) Descriptor() ([]byte, []int) {
	return file_build_build_proto_rawDescGZIP(), []int{10}
}

func (x *Output) GetStdout() string {
	if x != nil {
		return x.Stdout
	}
	return ""
}

func (x *Output) GetStderr() string {
	if x != nil {
		return x.Stderr
	}
	return ""
}

func (x *Output) GetArtifacts() []*Artifact {
	if x != nil {
		return x.Artifacts
	}
	return nil
}

func (x *Output) GetExitCode() int32 {
	if x != nil {
		return x.ExitCode
	}
	return 0
}

func (x *Output) GetWarnings() []string {
	if x != nil {
		return x.Warnings
	}
	return nil
}

func (x *Output) GetErrors() []string {
	if x != nil {
		return x.Errors
	}
	return nil
}

type Artifact struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Path          string                 `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	Type          string                 `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Size          int64                  `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`
	Hash          string                 `protobuf:"bytes,4,opt,name=hash,proto3" json:"hash,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Artifact) Reset() {
	*x = Artifact{}
	mi := &file_build_build_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Artifact) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Artifact) ProtoMessage() {}

func (x *Artifact) ProtoReflect() protoreflect.Message {
	mi := &file_build_build_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Artifact.ProtoReflect.Descriptor instead.
func (*Artifact) Descriptor() ([]byte, []int) {
	return file_build_build_proto_rawDescGZIP(), []int{11}
}

func (x *Artifact) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *Artifact) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Artifact) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *Artifact) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

type CompilerRemark struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Type          CompilerRemark_Type    `protobuf:"varint,2,opt,name=type,proto3,enum=build.v1.CompilerRemark_Type" json:"type,omitempty"`
	Pass          CompilerRemark_Pass    `protobuf:"varint,3,opt,name=pass,proto3,enum=build.v1.CompilerRemark_Pass" json:"pass,omitempty"`
	Status        CompilerRemark_Status  `protobuf:"varint,4,opt,name=status,proto3,enum=build.v1.CompilerRemark_Status" json:"status,omitempty"`
	Message       string                 `protobuf:"bytes,5,opt,name=message,proto3" json:"message,omitempty"`
	Function      string                 `protobuf:"bytes,6,opt,name=function,proto3" json:"function,omitempty"`
	Timestamp     *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Location      *Location              `protobuf:"bytes,8,opt,name=location,proto3" json:"location,omitempty"`
	Args          *RemarkArgs            `protobuf:"bytes,9,opt,name=args,proto3" json:"args,omitempty"`
	Hotness       int32                  `protobuf:"varint,10,opt,name=hotness,proto3" json:"hotness,omitempty"`
	KernelInfo    *KernelInfo            `protobuf:"bytes,11,opt,name=kernel_info,json=kernelInfo,proto3" json:"kernel_info,omitempty"`
	Metadata      *structpb.Struct       `protobuf:"bytes,12,opt,name=metadata,proto3" json:"metadata,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CompilerRemark) Reset() {
	*x = CompilerRemark{}
	mi := &file_build_build_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CompilerRemark) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompilerRemark) ProtoMessage() {}

func (x *CompilerRemark) ProtoReflect() protoreflect.Message {
	mi := &file_build_build_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompilerRemark.ProtoReflect.Descriptor instead.
func (*CompilerRemark) Descriptor() ([]byte, []int) {
	return file_build_build_proto_rawDescGZIP(), []int{12}
}

func (x *CompilerRemark) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CompilerRemark) GetType() CompilerRemark_Type {
	if x != nil {
		return x.Type
	}
	return CompilerRemark_TYPE_UNSPECIFIED
}

func (x *CompilerRemark) GetPass() CompilerRemark_Pass {
	if x != nil {
		return x.Pass
	}
	return CompilerRemark_PASS_UNSPECIFIED
}

func (x *CompilerRemark) GetStatus() CompilerRemark_Status {
	if x != nil {
		return x.Status
	}
	return CompilerRemark_STATUS_UNSPECIFIED
}

func (x *CompilerRemark) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CompilerRemark) GetFunction() string {
	if x != nil {
		return x.Function
	}
	return ""
}

func (x *CompilerRemark) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *CompilerRemark) GetLocation() *Location {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *CompilerRemark) GetArgs() *RemarkArgs {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *CompilerRemark) GetHotness() int32 {
	if x != nil {
		return x.Hotness
	}
	return 0
}

func (x *CompilerRemark) GetKernelInfo() *KernelInfo {
	if x != nil {
		return x.KernelInfo
	}
	return nil
}

func (x *CompilerRemark) GetMetadata() *structpb.Struct {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type Location struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	File          string                 `protobuf:"bytes,1,opt,name=file,proto3" json:"file,omitempty"`
	Line          int32                  `protobuf:"varint,2,opt,name=line,proto3" json:"line,omitempty"`
	Column        int32                  `protobuf:"varint,3,opt,name=column,proto3" json:"column,omitempty"`
	Function      string                 `protobuf:"bytes,4,opt,name=function,proto3" json:"function,omitempty"`
	Region        string                 `protobuf:"bytes,5,opt,name=region,proto3" json:"region,omitempty"`
	Artifact      string                 `protobuf:"bytes,6,opt,name=artifact,proto3" json:"artifact,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Location) Reset() {
	*x = Location{}
	mi := &file_build_build_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Location) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Location) ProtoMessage() {}

func (x *Location) ProtoReflect() protoreflect.Message {
	mi := &file_build_build_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Location.ProtoReflect.Descriptor instead.
func (*Location) Descriptor() ([]byte, []int) {
	return file_build_build_proto_rawDescGZIP(), []int{13}
}

func (x *Location) GetFile() string {
	if x != nil {
		return x.File
	}
	return ""
}

func (x *Location) GetLine() int32 {
	if x != nil {
		return x.Line
	}
	return 0
}

func (x *Location) GetColumn() int32 {
	if x != nil {
		return x.Column
	}
	return 0
}

func (x *Location) GetFunction() string {
	if x != nil {
		return x.Function
	}
	return ""
}

func (x *Location) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *Location) GetArtifact() string {
	if x != nil {
		return x.Artifact
	}
	return ""
}

type RemarkArgs struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Strings       []string               `protobuf:"bytes,1,rep,name=strings,proto3" json:"strings,omitempty"`
	Callee        string                 `protobuf:"bytes,2,opt,name=callee,proto3" json:"callee,omitempty"`
	Caller        string                 `protobuf:"bytes,3,opt,name=caller,proto3" json:"caller,omitempty"`
	Type          string                 `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	Line          string                 `protobuf:"bytes,5,opt,name=line,proto3" json:"line,omitempty"`
	Column        string                 `protobuf:"bytes,6,opt,name=column,proto3" json:"column,omitempty"`
	Cost          string                 `protobuf:"bytes,7,opt,name=cost,proto3" json:"cost,omitempty"`
	Reason        string                 `protobuf:"bytes,8,opt,name=reason,proto3" json:"reason,omitempty"`
	DebugLoc      *Location              `protobuf:"bytes,9,opt,name=debug_loc,json=debugLoc,proto3" json:"debug_loc,omitempty"`
	OtherAccess   *RemarkAccess          `protobuf:"bytes,10,opt,name=other_access,json=otherAccess,proto3" json:"other_access,omitempty"`
	ClobberedBy   *RemarkAccess          `protobuf:"bytes,11,opt,name=clobbered_by,json=clobberedBy,proto3" json:"clobbered_by,omitempty"`
	Values        map[string]string      `protobuf:"bytes,12,rep,name=values,proto3" json:"values,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemarkArgs) Reset() {
	*x = RemarkArgs{}
	mi := &file_build_build_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemarkArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemarkArgs) ProtoMessage() {}

func (x *RemarkArgs) ProtoReflect() protoreflect.Message {
	mi := &file_build_build_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemarkArgs.ProtoReflect.Descriptor instead.
func (*RemarkArgs) Descriptor() ([]byte, []int) {
	return file_build_build_proto_rawDescGZIP(), []int{14}
}

func (x *RemarkArgs) GetStrings() []string {
	if x != nil {
		return x.Strings
	}
	return nil
}

func (x *RemarkArgs) GetCallee() string {
	if x != nil {
		return x.Callee
	}
	return ""
}

func (x *RemarkArgs) GetCaller() string {
	if x != nil {
		return x.Caller
	}
	return ""
}

func (x *RemarkArgs) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *RemarkArgs) GetLine() string {
	if x != nil {
		return x.Line
	}
	return ""
}

func (x *RemarkArgs) GetColumn() string {
	if x != nil {
		return x.Column
	}
	return ""
}

func (x *RemarkArgs) GetCost() string {
	if x != nil {
		return x.Cost
	}
	return ""
}

func (x *RemarkArgs) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *RemarkArgs) GetDebugLoc() *Location {
	if x != nil {
		return x.DebugLoc
	}
	return nil
}

func (x *RemarkArgs) GetOtherAccess() *RemarkAccess {
	if x != nil {
		return x.OtherAccess
	}
	return nil
}

func (x *RemarkArgs) GetClobberedBy() *RemarkAccess {
	if x != nil {
		return x.ClobberedBy
	}
	return nil
}

func (x *RemarkArgs) GetValues() map[string]string {
	if x != nil {
		return x.Values
	}
	return nil
}

type RemarkAccess struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          string                 `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	DebugLoc      *Location              `protobuf:"bytes,2,opt,name=debug_loc,json=debugLoc,proto3" json:"debug_loc,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemarkAccess) Reset() {
	*x = RemarkAccess{}
	mi := &file_build_build_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemarkAccess) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemarkAccess) ProtoMessage() {}

func (x *RemarkAccess) ProtoReflect() protoreflect.Message {
	mi := &file_build_build_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemarkAccess.ProtoReflect.Descriptor instead.
func (*RemarkAccess) Descriptor() ([]byte, []int) {
	return file_build_build_proto_rawDescGZIP(), []int{15}
}

func (x *RemarkAccess) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *RemarkAccess) GetDebugLoc() *Location {
	if x != nil {
		return x.DebugLoc
	}
	return nil
}

type KernelInfo struct {
	state                    protoimpl.MessageState `protogen:"open.v1"`
	ThreadLimit              int32                  `protobuf:"varint,1,opt,name=thread_limit,json=threadLimit,proto3" json:"thread_limit,omitempty"`
	MaxThreadsX              int32                  `protobuf:"varint,2,opt,name=max_threads_x,json=maxThreadsX,proto3" json:"max_threads_x,omitempty"`
	MaxThreadsY              int32                  `protobuf:"varint,3,opt,name=max_threads_y,json=maxThreadsY,proto3" json:"max_threads_y,omitempty"`
	MaxThreadsZ              int32                  `protobuf:"varint,4,opt,name=max_threads_z,json=maxThreadsZ,proto3" json:"max_threads_z,omitempty"`
	SharedMemory             int64                  `protobuf:"varint,5,opt,name=shared_memory,json=sharedMemory,proto3" json:"shared_memory,omitempty"`
	Target                   string                 `protobuf:"bytes,6,opt,name=target,proto3" json:"target,omitempty"`
	DirectCalls              int32                  `protobuf:"varint,7,opt,name=direct_calls,json=directCalls,proto3" json:"direct_calls,omitempty"`
	IndirectCalls            int32                  `protobuf:"varint,8,opt,name=indirect_calls,json=indirectCalls,proto3" json:"indirect_calls,omitempty"`
	Callees                  []string               `protobuf:"bytes,9,rep,name=callees,proto3" json:"callees,omitempty"`
	AllocasCount             int32                  `protobuf:"varint,10,opt,name=allocas_count,json=allocasCount,proto3" json:"allocas_count,omitempty"`
	AllocasStaticSize        int64                  `protobuf:"varint,11,opt,name=allocas_static_size,json=allocasStaticSize,proto3" json:"allocas_static_size,omitempty"`
	AllocasDynamicCount      int32                  `protobuf:"varint,12,opt,name=allocas_dynamic_count,json=allocasDynamicCount,proto3" json:"allocas_dynamic_count,omitempty"`
	FlatAddressSpaceAccesses int32                  `protobuf:"varint,13,opt,name=flat_address_space_accesses,json=flatAddressSpaceAccesses,proto3" json:"flat_address_space_accesses,omitempty"`
	InlineAssemblyCalls      int32                  `protobuf:"varint,14,opt,name=inline_assembly_calls,json=inlineAssemblyCalls,proto3" json:"inline_assembly_calls,omitempty"`
	MemoryAccesses           []*MemoryAccess        `protobuf:"bytes,15,rep,name=memory_accesses,json=memoryAccesses,proto3" json:"memory_accesses,omitempty"`
	Metrics                  map[string]int64       `protobuf:"bytes,16,rep,name=metrics,proto3" json:"metrics,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	Attributes               map[string]string      `protobuf:"bytes,17,rep,name=attributes,proto3" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *KernelInfo) Reset() {
	*x = KernelInfo{}
	mi := &file_build_build_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KernelInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KernelInfo) ProtoMessage() {}

func (x *KernelInfo) ProtoReflect() protoreflect.Message {
	mi := &file_build_build_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KernelInfo.ProtoReflect.Descriptor instead.
func (*KernelInfo) Descriptor() ([]byte, []int) {
	return file_build_build_proto_rawDescGZIP(), []int{16}
}

func (x *KernelInfo) GetThreadLimit() int32 {
	if x != nil {
		return x.ThreadLimit
	}
	return 0
}

func (x *KernelInfo) GetMaxThreadsX() int32 {
	if x != nil {
		return x.MaxThreadsX
	}
	return 0
}

func (x *KernelInfo) GetMaxThreadsY() int32 {
	if x != nil {
		return x.MaxThreadsY
	}
	return 0
}

func (x *KernelInfo) GetMaxThreadsZ() int32 {
	if x != nil {
		return x.MaxThreadsZ
	}
	return 0
}

func (x *KernelInfo) GetSharedMemory() int64 {
	if x != nil {
		return x.SharedMemory
	}
	return 0
}

func (x *KernelInfo) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *KernelInfo) GetDirectCalls() int32 {
	if x != nil {
		return x.DirectCalls
	}
	return 0
}

func (x *KernelInfo) GetIndirectCalls() int32 {
	if x != nil {
		return x.IndirectCalls
	}
	return 0
}

func (x *KernelInfo) GetCallees() []string {
	if x != nil {
		return x.Callees
	}
	return nil
}

func (x *KernelInfo) GetAllocasCount() int32 {
	if x != nil {
		return x.AllocasCount
	}
	return 0
}

func (x *KernelInfo) GetAllocasStaticSize() int64 {
	if x != nil {
		return x.AllocasStaticSize
	}
	return 0
}

func (x *KernelInfo) GetAllocasDynamicCount() int32 {
	if x != nil {
		return x.AllocasDynamicCount
	}
	return 0
}

func (x *KernelInfo) GetFlatAddressSpaceAccesses() int32 {
	if x != nil {
		return x.FlatAddressSpaceAccesses
	}
	return 0
}

func (x *KernelInfo) GetInlineAssemblyCalls() int32 {
	if x != nil {
		return x.InlineAssemblyCalls
	}
	return 0
}

func (x *KernelInfo) GetMemoryAccesses() []*MemoryAccess {
	if x != nil {
		return x.MemoryAccesses
	}
	return nil
}

func (x *KernelInfo) GetMetrics() map[string]int64 {
	if x != nil {
		return x.Metrics
	}
	return nil
}

func (x *KernelInfo) GetAttributes() map[string]string {
	if x != nil {
		return x.Attributes
	}
	return nil
}

type MemoryAccess struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          string                 `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	AddressSpace  string                 `protobuf:"bytes,2,opt,name=address_space,json=addressSpace,proto3" json:"address_space,omitempty"`
	Instruction   string                 `protobuf:"bytes,3,opt,name=instruction,proto3" json:"instruction,omitempty"`
	Variable      string                 `protobuf:"bytes,4,opt,name=variable,proto3" json:"variable,omitempty"`
	AccessPattern string                 `protobuf:"bytes,5,opt,name=access_pattern,json=accessPattern,proto3" json:"access_pattern,omitempty"`
	Location      *Location              `protobuf:"bytes,6,opt,name=location,proto3" json:"location,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MemoryAccess) Reset() {
	*x = MemoryAccess{}
	mi := &file_build_build_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MemoryAccess) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemoryAccess) ProtoMessage() {}

func (x *MemoryAccess) ProtoReflect() protoreflect.Message {
	mi := &file_build_build_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemoryAccess.ProtoReflect.Descriptor instead.
func (*MemoryAccess) Descriptor() ([]byte, []int) {
	return file_build_build_proto_rawDescGZIP(), []int{17}
}

func (x *MemoryAccess) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *MemoryAccess) GetAddressSpace() string {
	if x != nil {
		return x.AddressSpace
	}
	return ""
}

func (x *MemoryAccess) GetInstruction() string {
	if x != nil {
		return x.Instruction
	}
	return ""
}

func (x *MemoryAccess) GetVariable() string {
	if x != nil {
		return x.Variable
	}
	return ""
}

func (x *MemoryAccess) GetAccessPattern() string {
	if x != nil {
		return x.AccessPattern
	}
	return ""
}

func (x *MemoryAccess) GetLocation() *Location {
	if x != nil {
		return x.Location
	}
	return nil
}

type ResourceUsage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MaxMemory     int64                  `protobuf:"varint,1,opt,name=max_memory,json=maxMemory,proto3" json:"max_memory,omitempty"`
	CpuTime       float64                `protobuf:"fixed64,2,opt,name=cpu_time,json=cpuTime,proto3" json:"cpu_time,omitempty"`
	Threads       int32                  `protobuf:"varint,3,opt,name=threads,proto3" json:"threads,omitempty"`
	Io            *IOStats               `protobuf:"bytes,4,opt,name=io,proto3" json:"io,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResourceUsage) Reset() {
	*x = ResourceUsage{}
	mi := &file_build_build_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResourceUsage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceUsage) ProtoMessage() {}

func (x *ResourceUsage) ProtoReflect() protoreflect.Message {
	mi := &file_build_build_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceUsage.ProtoReflect.Descriptor instead.
func (*ResourceUsage) Descriptor() ([]byte, []int) {
	return file_build_build_proto_rawDescGZIP(), []int{18}
}

func (x *ResourceUsage) GetMaxMemory() int64 {
	if x != nil {
		return x.MaxMemory
	}
	return 0
}

func (x *ResourceUsage) GetCpuTime() float64 {
	if x != nil {
		return x.CpuTime
	}
	return 0
}

func (x *ResourceUsage) GetThreads() int32 {
	if x != nil {
		return x.Threads
	}
	return 0
}

func (x *ResourceUsage) GetIo() *IOStats {
	if x != nil {
		return x.Io
	}
	return nil
}

type IOStats struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ReadBytes     int64                  `protobuf:"varint,1,opt,name=read_bytes,json=readBytes,proto3" json:"read_bytes,omitempty"`
	WriteBytes    int64                  `protobuf:"varint,2,opt,name=write_bytes,json=writeBytes,proto3" json:"write_bytes,omitempty"`
	ReadCount     int64                  `protobuf:"varint,3,opt,name=read_count,json=readCount,proto3" json:"read_count,omitempty"`
	WriteCount    int64                  `protobuf:"varint,4,opt,name=write_count,json=writeCount,proto3" json:"write_count,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IOStats) Reset() {
	*x = IOStats{}
	mi := &file_build_build_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IOStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IOStats) ProtoMessage() {}

func (x *IOStats) ProtoReflect() protoreflect.Message {
	mi := &file_build_build_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IOStats.ProtoReflect.Descriptor instead.
func (*IOStats) Descriptor() ([]byte, []int) {
	return file_build_build_proto_rawDescGZIP(), []int{19}
}

func (x *IOStats) GetReadBytes() int64 {
	if x != nil {
		return x.ReadBytes
	}
	return 0
}

func (x *IOStats) GetWriteBytes() int64 {
	if x != nil {
		return x.WriteBytes
	}
	return 0
}

func (x *IOStats) GetReadCount() int64 {
	if x != nil {
		return x.ReadCount
	}
	return 0
}

func (x *IOStats) GetWriteCount() int64 {
	if x != nil {
		return x.WriteCount
	}
	return 0
}

type Performance struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CompileTime   float64                `protobuf:"fixed64,1,opt,name=compile_time,json=compileTime,proto3" json:"compile_time,omitempty"`
	LinkTime      float64                `protobuf:"fixed64,2,opt,name=link_time,json=linkTime,proto3" json:"link_time,omitempty"`
	OptimizeTime  float64                `protobuf:"fixed64,3,opt,name=optimize_time,json=optimizeTime,proto3" json:"optimize_time,omitempty"`
	Phases        map[string]float64     `protobuf:"bytes,4,rep,name=phases,proto3" json:"phases,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"fixed64,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Performance) Reset() {
	*x = Performance{}
	mi := &file_build_build_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Performance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Performance) ProtoMessage() {}

func (x *Performance) ProtoReflect() protoreflect.Message {
	mi := &file_build_build_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Performance.ProtoReflect.Descriptor instead.
func (*Performance) Descriptor() ([]byte, []int) {
	return file_build_build_proto_rawDescGZIP(), []int{20}
}

func (x *Performance) GetCompileTime() float64 {
	if x != nil {
		return x.CompileTime
	}
	return 0
}

func (x *Performance) GetLinkTime() float64 {
	if x != nil {
		return x.LinkTime
	}
	return 0
}

func (x *Performance) GetOptimizeTime() float64 {
	if x != nil {
		return x.OptimizeTime
	}
	return 0
}

func (x *Performance) GetPhases() map[string]float64 {
	if x != nil {
		return x.Phases
	}
	return nil
}

type BuildMetrics struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	TotalFiles     int32                  `protobuf:"varint,1,opt,name=total_files,json=totalFiles,proto3" json:"total_files,omitempty"`
	ProcessedFiles int32                  `protobuf:"varint,2,opt,name=processed_files,json=processedFiles,proto3" json:"processed_files,omitempty"`
	Warnings       int32                  `protobuf:"varint,3,opt,name=warnings,proto3" json:"warnings,omitempty"`
	Errors         int32                  `protobuf:"varint,4,opt,name=errors,proto3" json:"errors,omitempty"`
	InputSize      int64                  `protobuf:"varint,5,opt,name=input_size,json=inputSize,proto3" json:"input_size,omitempty"`
	OutputSize     int64                  `protobuf:"varint,6,opt,name=output_size,json=outputSize,proto3" json:"output_size,omitempty"`
	Metrics        map[string]float64     `protobuf:"bytes,7,rep,name=metrics,proto3" json:"metrics,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"fixed64,2,opt,name=value"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *BuildMetrics) Reset() {
	*x = BuildMetrics{}
	mi := &file_build_build_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BuildMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildMetrics) ProtoMessage() {}

func (x *BuildMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_build_build_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildMetrics.ProtoReflect.Descriptor instead.
func (*BuildMetrics) Descriptor() ([]byte, []int) {
	return file_build_build_proto_rawDescGZIP(), []int{21}
}

func (x *BuildMetrics) GetTotalFiles() int32 {
	if x != nil {
		return x.TotalFiles
	}
	return 0
}

func (x *BuildMetrics) GetProcessedFiles() int32 {
	if x != nil {
		return x.ProcessedFiles
	}
	return 0
}

func (x *BuildMetrics) GetWarnings() int32 {
	if x != nil {
		return x.Warnings
	}
	return 0
}

func (x *BuildMetrics) GetErrors() int32 {
	if x != nil {
		return x.Errors
	}
	return 0
}

func (x *BuildMetrics) GetInputSize() int64 {
	if x != nil {
		return x.InputSize
	}
	return 0
}

func (x *BuildMetrics) GetOutputSize() int64 {
	if x != nil {
		return x.OutputSize
	}
	return 0
}

func (x *BuildMetrics) GetMetrics() map[string]float64 {
	if x != nil {
		return x.Metrics
	}
	return nil
}

var File_build_build_proto protoreflect.FileDescriptor

var file_build_build_proto_rawDesc = []byte{
	0x0a, 0x11, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x2f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x08, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa4, 0x05, 0x0a,
	0x05, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x12, 0x37, 0x0a, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x75, 0x69, 0x6c,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2e, 0x0a,
	0x08, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x61, 0x72, 0x64, 0x77,
	0x61, 0x72, 0x65, 0x52, 0x08, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x12, 0x2e, 0x0a,
	0x08, 0x63, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x69,
	0x6c, 0x65, 0x72, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x72, 0x12, 0x2b, 0x0a,
	0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x28, 0x0a, 0x06, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x62, 0x75, 0x69,
	0x6c, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x06, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x12, 0x30, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x07, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x32, 0x0a, 0x07, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b,
	0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x6d, 0x61, 0x72,
	0x6b, 0x52, 0x07, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x12, 0x3e, 0x0a, 0x0e, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0d, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x37, 0x0a, 0x0b, 0x70, 0x65,
	0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65, 0x72, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x6e, 0x63, 0x65, 0x22, 0xd4, 0x01, 0x0a, 0x0b, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x6f, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x72, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x61, 0x72, 0x63, 0x68, 0x12, 0x42, 0x0a, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x62, 0x75, 0x69,
	0x6c, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x77,
	0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x69, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x72, 0x1a, 0x3c, 0x0a, 0x0e,
	0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x78, 0x0a, 0x08, 0x48, 0x61,
	0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x12, 0x1f, 0x0a, 0x03, 0x63, 0x70, 0x75, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x50, 0x55, 0x52, 0x03, 0x63, 0x70, 0x75, 0x12, 0x28, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x12, 0x21, 0x0a, 0x04, 0x67, 0x70, 0x75, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x50, 0x55, 0x52, 0x04,
	0x67, 0x70, 0x75, 0x73, 0x22, 0xa0, 0x01, 0x0a, 0x03, 0x43, 0x50, 0x55, 0x12, 0x14, 0x0a, 0x05,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x61, 0x63, 0x68,
	0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x61,
	0x63, 0x68, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x8c, 0x01, 0x0a, 0x06, 0x4d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x61, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x77, 0x61, 0x70,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x66, 0x72,
	0x65, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x77, 0x61, 0x70, 0x46, 0x72,
	0x65, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x04, 0x75, 0x73, 0x65, 0x64, 0x22, 0x6e, 0x0a, 0x03, 0x47, 0x50, 0x55, 0x12, 0x14, 0x0a,
	0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x64,
	0x72, 0x69, 0x76, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x72, 0x69,
	0x76, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x5f, 0x63,
	0x61, 0x70, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x75,
	0x74, 0x65, 0x43, 0x61, 0x70, 0x73, 0x22, 0xd0, 0x03, 0x0a, 0x08, 0x43, 0x6f, 0x6d, 0x70, 0x69,
	0x6c, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x4b, 0x0a, 0x0d, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x62, 0x75, 0x69,
	0x6c, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x72, 0x2e, 0x4f,
	0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0d, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x33, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x69,
	0x6c, 0x65, 0x72, 0x2e, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05,
	0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x2e, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x36, 0x0a, 0x08, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x72, 0x46, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x73, 0x52, 0x08, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x1a, 0x40, 0x0a,
	0x12, 0x4f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x38, 0x0a, 0x0a, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x5e, 0x0a, 0x08, 0x4c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x70, 0x65, 0x63,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xc4, 0x01, 0x0a, 0x10, 0x43, 0x6f,
	0x6d, 0x70, 0x69, 0x6c, 0x65, 0x72, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x27,
	0x0a, 0x0f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x6d,
	0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
	0x73, 0x4f, 0x70, 0x65, 0x6e, 0x6d, 0x70, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x75, 0x70, 0x70, 0x6f,
	0x72, 0x74, 0x73, 0x5f, 0x67, 0x70, 0x75, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x73,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x47, 0x70, 0x75, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x5f, 0x6c, 0x74, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0b, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x4c, 0x74, 0x6f, 0x12, 0x21, 0x0a,
	0x0c, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x5f, 0x70, 0x67, 0x6f, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0b, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x50, 0x67, 0x6f,
	0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x22, 0xce, 0x01, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x1e, 0x0a, 0x0a,
	0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x09, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x6f,
	0x72, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x69, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x72, 0x12, 0x2c, 0x0a, 0x03, 0x65,
	0x6e, 0x76, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x45, 0x6e, 0x76, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x03, 0x65, 0x6e, 0x76, 0x1a, 0x36, 0x0a, 0x08, 0x45, 0x6e, 0x76,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0xbb, 0x01, 0x0a, 0x06, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x64, 0x6f, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74,
	0x64, 0x6f, 0x75, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x64, 0x65, 0x72, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x64, 0x65, 0x72, 0x72, 0x12, 0x30, 0x0a, 0x09,
	0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x66,
	0x61, 0x63, 0x74, 0x52, 0x09, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x12, 0x1b,
	0x0a, 0x09, 0x65, 0x78, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x65, 0x78, 0x69, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x77,
	0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x77,
	0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x22,
	0x5a, 0x0a, 0x08, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x22, 0xb0, 0x06, 0x0a, 0x0e,
	0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x31,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x62,
	0x75, 0x69, 0x6c, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x72,
	0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x31, 0x0a, 0x04, 0x70, 0x61, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1d, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x69,
	0x6c, 0x65, 0x72, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x52, 0x04,
	0x70, 0x61, 0x73, 0x73, 0x12, 0x37, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x2e, 0x0a,
	0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a,
	0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x62, 0x75,
	0x69, 0x6c, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x41, 0x72, 0x67,
	0x73, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x68, 0x6f, 0x74, 0x6e, 0x65,
	0x73, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x68, 0x6f, 0x74, 0x6e, 0x65, 0x73,
	0x73, 0x12, 0x35, 0x0a, 0x0b, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x4b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x6b, 0x65,
	0x72, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x33, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x5e, 0x0a,
	0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x4f,
	0x50, 0x54, 0x49, 0x4d, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x0a, 0x0a,
	0x06, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x4e, 0x41,
	0x4c, 0x59, 0x53, 0x49, 0x53, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x45, 0x54, 0x52, 0x49,
	0x43, 0x10, 0x04, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x05, 0x22, 0x70, 0x0a,
	0x04, 0x50, 0x61, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x56,
	0x45, 0x43, 0x54, 0x4f, 0x52, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x0c,
	0x0a, 0x08, 0x49, 0x4e, 0x4c, 0x49, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b,
	0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x03, 0x12, 0x0d, 0x0a,
	0x09, 0x53, 0x49, 0x5a, 0x45, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d,
	0x50, 0x41, 0x53, 0x53, 0x5f, 0x41, 0x4e, 0x41, 0x4c, 0x59, 0x53, 0x49, 0x53, 0x10, 0x05, 0x22,
	0x4d, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x41, 0x53, 0x53, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0a, 0x0a,
	0x06, 0x4d, 0x49, 0x53, 0x53, 0x45, 0x44, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x41, 0x4e, 0x41, 0x4c, 0x59, 0x53, 0x49, 0x53, 0x10, 0x03, 0x22, 0x9a,
	0x01, 0x0a, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x66,
	0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x6c,
	0x69, 0x6e, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x66,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12,
	0x1a, 0x0a, 0x08, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x22, 0xde, 0x03, 0x0a, 0x0a,
	0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x41, 0x72, 0x67, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x61,
	0x6c, 0x6c, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x12, 0x2f, 0x0a, 0x09, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x6c, 0x6f, 0x63, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x64, 0x65, 0x62, 0x75, 0x67, 0x4c, 0x6f,
	0x63, 0x12, 0x39, 0x0a, 0x0c, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52,
	0x0b, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x39, 0x0a, 0x0c,
	0x63, 0x6c, 0x6f, 0x62, 0x62, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65,
	0x6d, 0x61, 0x72, 0x6b, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x0b, 0x63, 0x6c, 0x6f, 0x62,
	0x62, 0x65, 0x72, 0x65, 0x64, 0x42, 0x79, 0x12, 0x38, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x41, 0x72, 0x67, 0x73, 0x2e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x53, 0x0a, 0x0c,
	0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x2f, 0x0a, 0x09, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x6c, 0x6f, 0x63, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x64, 0x65, 0x62, 0x75, 0x67, 0x4c, 0x6f,
	0x63, 0x22, 0xf7, 0x06, 0x0a, 0x0a, 0x4b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x21, 0x0a, 0x0c, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x61,
	0x64, 0x73, 0x5f, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x54,
	0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x58, 0x12, 0x22, 0x0a, 0x0d, 0x6d, 0x61, 0x78, 0x5f, 0x74,
	0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x5f, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b,
	0x6d, 0x61, 0x78, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x59, 0x12, 0x22, 0x0a, 0x0d, 0x6d,
	0x61, 0x78, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x5f, 0x7a, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x5a, 0x12,
	0x23, 0x0a, 0x0d, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x4d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x21, 0x0a, 0x0c,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0b, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x12,
	0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x63, 0x61, 0x6c, 0x6c,
	0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x69, 0x6e, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x65,
	0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x65, 0x73,
	0x12, 0x23, 0x0a, 0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x73,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x73,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x73, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x63, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x73,
	0x5f, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x73, 0x44, 0x79, 0x6e,
	0x61, 0x6d, 0x69, 0x63, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3d, 0x0a, 0x1b, 0x66, 0x6c, 0x61,
	0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x18,
	0x66, 0x6c, 0x61, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x53, 0x70, 0x61, 0x63, 0x65,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x69, 0x6e, 0x6c, 0x69,
	0x6e, 0x65, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x79, 0x5f, 0x63, 0x61, 0x6c, 0x6c,
	0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x41,
	0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x79, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x12, 0x3f, 0x0a, 0x0f,
	0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18,
	0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x0e, 0x6d,
	0x65, 0x6d, 0x6f, 0x72, 0x79, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x3b, 0x0a,
	0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x65, 0x72, 0x6e, 0x65, 0x6c,
	0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x44, 0x0a, 0x0a, 0x61, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x65, 0x72, 0x6e, 0x65, 0x6c,
	0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x1a, 0x3a, 0x0a, 0x0c, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3d, 0x0a, 0x0f,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xdc, 0x01, 0x0a, 0x0c,
	0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x23, 0x0a, 0x0d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x53, 0x70, 0x61, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x61, 0x72, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x76, 0x61, 0x72, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x70, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0x2e, 0x0a, 0x08, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x62,
	0x75, 0x69, 0x6c, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x86, 0x01, 0x0a, 0x0d, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x6d, 0x61, 0x78, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x6d, 0x61, 0x78, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x63,
	0x70, 0x75, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x63,
	0x70, 0x75, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73,
	0x12, 0x21, 0x0a, 0x02, 0x69, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x62,
	0x75, 0x69, 0x6c, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x4f, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52,
	0x02, 0x69, 0x6f, 0x22, 0x89, 0x01, 0x0a, 0x07, 0x49, 0x4f, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12,
	0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x72, 0x65, 0x61, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x1f,
	0x0a, 0x0b, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12,
	0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x72, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f,
	0x0a, 0x0b, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22,
	0xe8, 0x01, 0x0a, 0x0b, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6c, 0x69, 0x6e, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x06, 0x70, 0x68, 0x61, 0x73, 0x65, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x50, 0x68, 0x61, 0x73,
	0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x70, 0x68, 0x61, 0x73, 0x65, 0x73, 0x1a,
	0x39, 0x0a, 0x0b, 0x50, 0x68, 0x61, 0x73, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc7, 0x02, 0x0a, 0x0c, 0x42,
	0x75, 0x69, 0x6c, 0x64, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x0f,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64,
	0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x3d, 0x0a, 0x07, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x62, 0x75, 0x69,
	0x6c, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x1a, 0x3a, 0x0a, 0x0c, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x2a, 0x64, 0x0a, 0x0a, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x4f, 0x50, 0x54, 0x49,
	0x4d, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x4b, 0x45,
	0x52, 0x4e, 0x45, 0x4c, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x4e, 0x41, 0x4c, 0x59, 0x53,
	0x49, 0x53, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x10, 0x04,
	0x12, 0x08, 0x0a, 0x04, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x05, 0x2a, 0x76, 0x0a, 0x0a, 0x52, 0x65,
	0x6d, 0x61, 0x72, 0x6b, 0x50, 0x61, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x41, 0x53, 0x53,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x11,
	0x0a, 0x0d, 0x56, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10,
	0x01, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x4e, 0x4c, 0x49, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12,
	0x0f, 0x0a, 0x0b, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x03,
	0x12, 0x0d, 0x0a, 0x09, 0x53, 0x49, 0x5a, 0x45, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x04, 0x12,
	0x11, 0x0a, 0x0d, 0x50, 0x41, 0x53, 0x53, 0x5f, 0x41, 0x4e, 0x41, 0x4c, 0x59, 0x53, 0x49, 0x53,
	0x10, 0x05, 0x2a, 0x53, 0x0a, 0x0c, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x41,
	0x53, 0x53, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x49, 0x53, 0x53, 0x45, 0x44,
	0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x41, 0x4e, 0x41,
	0x4c, 0x59, 0x53, 0x49, 0x53, 0x10, 0x03, 0x42, 0x12, 0x5a, 0x10, 0x62, 0x75, 0x69, 0x6c, 0x64,
	0x73, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_build_build_proto_rawDescOnce sync.Once
	file_build_build_proto_rawDescData = file_build_build_proto_rawDesc
)

func file_build_build_proto_rawDescGZIP() []byte {
	file_build_build_proto_rawDescOnce.Do(func() {
		file_build_build_proto_rawDescData = protoimpl.X.CompressGZIP(file_build_build_proto_rawDescData)
	})
	return file_build_build_proto_rawDescData
}

var file_build_build_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_build_build_proto_msgTypes = make([]protoimpl.MessageInfo, 31)
var file_build_build_proto_goTypes = []any{
	(RemarkType)(0),               // 0: build.v1.RemarkType
	(RemarkPass)(0),               // 1: build.v1.RemarkPass
	(RemarkStatus)(0),             // 2: build.v1.RemarkStatus
	(CompilerRemark_Type)(0),      // 3: build.v1.CompilerRemark.Type
	(CompilerRemark_Pass)(0),      // 4: build.v1.CompilerRemark.Pass
	(CompilerRemark_Status)(0),    // 5: build.v1.CompilerRemark.Status
	(*Build)(nil),                 // 6: build.v1.Build
	(*Environment)(nil),           // 7: build.v1.Environment
	(*Hardware)(nil),              // 8: build.v1.Hardware
	(*CPU)(nil),                   // 9: build.v1.CPU
	(*Memory)(nil),                // 10: build.v1.Memory
	(*GPU)(nil),                   // 11: build.v1.GPU
	(*Compiler)(nil),              // 12: build.v1.Compiler
	(*Language)(nil),              // 13: build.v1.Language
	(*CompilerFeatures)(nil),      // 14: build.v1.CompilerFeatures
	(*Command)(nil),               // 15: build.v1.Command
	(*Output)(nil),                // 16: build.v1.Output
	(*Artifact)(nil),              // 17: build.v1.Artifact
	(*CompilerRemark)(nil),        // 18: build.v1.CompilerRemark
	(*Location)(nil),              // 19: build.v1.Location
	(*RemarkArgs)(nil),            // 20: build.v1.RemarkArgs
	(*RemarkAccess)(nil),          // 21: build.v1.RemarkAccess
	(*KernelInfo)(nil),            // 22: build.v1.KernelInfo
	(*MemoryAccess)(nil),          // 23: build.v1.MemoryAccess
	(*ResourceUsage)(nil),         // 24: build.v1.ResourceUsage
	(*IOStats)(nil),               // 25: build.v1.IOStats
	(*Performance)(nil),           // 26: build.v1.Performance
	(*BuildMetrics)(nil),          // 27: build.v1.BuildMetrics
	nil,                           // 28: build.v1.Environment.VariablesEntry
	nil,                           // 29: build.v1.Compiler.OptimizationsEntry
	nil,                           // 30: build.v1.Compiler.FlagsEntry
	nil,                           // 31: build.v1.Command.EnvEntry
	nil,                           // 32: build.v1.RemarkArgs.ValuesEntry
	nil,                           // 33: build.v1.KernelInfo.MetricsEntry
	nil,                           // 34: build.v1.KernelInfo.AttributesEntry
	nil,                           // 35: build.v1.Performance.PhasesEntry
	nil,                           // 36: build.v1.BuildMetrics.MetricsEntry
	(*timestamppb.Timestamp)(nil), // 37: google.protobuf.Timestamp
	(*structpb.Struct)(nil),       // 38: google.protobuf.Struct
}
var file_build_build_proto_depIdxs = []int32{
	37, // 0: build.v1.Build.start_time:type_name -> google.protobuf.Timestamp
	37, // 1: build.v1.Build.end_time:type_name -> google.protobuf.Timestamp
	7,  // 2: build.v1.Build.environment:type_name -> build.v1.Environment
	8,  // 3: build.v1.Build.hardware:type_name -> build.v1.Hardware
	12, // 4: build.v1.Build.compiler:type_name -> build.v1.Compiler
	15, // 5: build.v1.Build.command:type_name -> build.v1.Command
	16, // 6: build.v1.Build.output:type_name -> build.v1.Output
	27, // 7: build.v1.Build.metrics:type_name -> build.v1.BuildMetrics
	18, // 8: build.v1.Build.remarks:type_name -> build.v1.CompilerRemark
	24, // 9: build.v1.Build.resource_usage:type_name -> build.v1.ResourceUsage
	26, // 10: build.v1.Build.performance:type_name -> build.v1.Performance
	28, // 11: build.v1.Environment.variables:type_name -> build.v1.Environment.VariablesEntry
	9,  // 12: build.v1.Hardware.cpu:type_name -> build.v1.CPU
	10, // 13: build.v1.Hardware.memory:type_name -> build.v1.Memory
	11, // 14: build.v1.Hardware.gpus:type_name -> build.v1.GPU
	29, // 15: build.v1.Compiler.optimizations:type_name -> build.v1.Compiler.OptimizationsEntry
	30, // 16: build.v1.Compiler.flags:type_name -> build.v1.Compiler.FlagsEntry
	13, // 17: build.v1.Compiler.language:type_name -> build.v1.Language
	14, // 18: build.v1.Compiler.features:type_name -> build.v1.CompilerFeatures
	31, // 19: build.v1.Command.env:type_name -> build.v1.Command.EnvEntry
	17, // 20: build.v1.Output.artifacts:type_name -> build.v1.Artifact
	3,  // 21: build.v1.CompilerRemark.type:type_name -> build.v1.CompilerRemark.Type
	4,  // 22: build.v1.CompilerRemark.pass:type_name -> build.v1.CompilerRemark.Pass
	5,  // 23: build.v1.CompilerRemark.status:type_name -> build.v1.CompilerRemark.Status
	37, // 24: build.v1.CompilerRemark.timestamp:type_name -> google.protobuf.Timestamp
	19, // 25: build.v1.CompilerRemark.location:type_name -> build.v1.Location
	20, // 26: build.v1.CompilerRemark.args:type_name -> build.v1.RemarkArgs
	22, // 27: build.v1.CompilerRemark.kernel_info:type_name -> build.v1.KernelInfo
	38, // 28: build.v1.CompilerRemark.metadata:type_name -> google.protobuf.Struct
	19, // 29: build.v1.RemarkArgs.debug_loc:type_name -> build.v1.Location
	21, // 30: build.v1.RemarkArgs.other_access:type_name -> build.v1.RemarkAccess
	21, // 31: build.v1.RemarkArgs.clobbered_by:type_name -> build.v1.RemarkAccess
	32, // 32: build.v1.RemarkArgs.values:type_name -> build.v1.RemarkArgs.ValuesEntry
	19, // 33: build.v1.RemarkAccess.debug_loc:type_name -> build.v1.Location
	23, // 34: build.v1.KernelInfo.memory_accesses:type_name -> build.v1.MemoryAccess
	33, // 35: build.v1.KernelInfo.metrics:type_name -> build.v1.KernelInfo.MetricsEntry
	34, // 36: build.v1.KernelInfo.attributes:type_name -> build.v1.KernelInfo.AttributesEntry
	19, // 37: build.v1.MemoryAccess.location:type_name -> build.v1.Location
	25, // 38: build.v1.ResourceUsage.io:type_name -> build.v1.IOStats
	35, // 39: build.v1.Performance.phases:type_name -> build.v1.Performance.PhasesEntry
	36, // 40: build.v1.BuildMetrics.metrics:type_name -> build.v1.BuildMetrics.MetricsEntry
	41, // [41:41] is the sub-list for method output_type
	41, // [41:41] is the sub-list for method input_type
	41, // [41:41] is the sub-list for extension type_name
	41, // [41:41] is the sub-list for extension extendee
	0,  // [0:41] is the sub-list for field type_name
}

func init() { file_build_build_proto_init() }
func file_build_build_proto_init() {
	if File_build_build_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_build_build_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   31,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_build_build_proto_goTypes,
		DependencyIndexes: file_build_build_proto_depIdxs,
		EnumInfos:         file_build_build_proto_enumTypes,
		MessageInfos:      file_build_build_proto_msgTypes,
	}.Build()
	File_build_build_proto = out.File
	file_build_build_proto_rawDesc = nil
	file_build_build_proto_goTypes = nil
	file_build_build_proto_depIdxs = nil
}
